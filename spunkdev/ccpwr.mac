TITLE  .CCPWR
;
        TWOSEG
        RELOC   ^O400000


;COMPLEX NUMBER TO A COMPLEX POWER FUNCTION.

;THE ALGORITHM USED IS:

;(X+IY)**(A+IB)=

;EXP[A*LOG(R)-B*TH+LOG(TRIG(A*TH+B*LOG(R)))]

;WHERE TRIG=COS FOR THE REAL PART AND SIN
;FOR THE IMAGINARY PART., AND WHERE
;R=(X**2+Y**2)**0.5 AND
;TH=ATAN2(Y,X).

;THIS ROUTINE USES THE FACT THAT EXP(N) WHERE
;N>ABOUT 89.0 IN MAGNITUDE OVER OR UNDERFLOWS,
;AND THAT COS AND SIN OF LARGE ARGUMENTS RETURN
;ZERO BECAUSE OF THEIR RANGE REDUCTION.

;THE CALLING SEQUENCE FOR THIS ROUTINE IS
;       PUSHJ   P,CCPWR
;       R1,R2 = COMPLEX BASE
;       R3,R4 = COMPLEX POWER
;THE RESULT IS RETURNED IN R1,R2



        ENTRY   .CCPWR
        EXTERN  .RRPWR,.CLOG,.SLOG,.SEXP,.SSIN,.SCOS,RNDBL

.CCPWR: DMOVE   0,1             ;MOVE BASE
        DMOVE   2,3             ;MOVE POWER
        JUMPN   0,.+3           ;IF THE BASE = (0,0),
        JUMPN   1,.+2           ;THEN THE ANSWER IS SET = (0,0),
        JRST    OWT             ;AND THE ROUTINE EXITS.
        JUMPN   3,NORMAL        ;IF IMAG(BASE) = 0 AND
        JUMPN   2,RLTORL        ;IMAG(POWER) = 0, THEN GO TO RLTORL.
        HRLZI   0,201400        ;IF THE BASE NE (0,0) AND THE POWER
        SETZM   1               ;= (0,0), THE ANSWER = (1,0)
OWT:
OUT1:   MOVE    2,1
        MOVE    1,0
        POPJ    17,             ;EXIT.
RLTORL: JUMPN   1,NORMAL        ;RLTORL IS IMAG OF BASE AND POWER = 0.
        JUMPL   0,NORMAL        ;BASE MUST BE >=0 HERE.
        CALL    .RRPWR,<,$,0,,$,2>        ;CALC REAL PART
        MOVE    0,1             ;MOVE RESULT TO R0
        SETZM   1               ;IMAG(ANS) = 0.
        JRST    OUT1            ;GO TO EXIT.
NORMAL: MOVEM   0,BASE1         ;SAVE THE BASE IN BASE1
        MOVEM   1,BASE2         ;AND BASE2.
        MOVEM   2,POWER1        ;SAVE THE POWER IN POWER1
        MOVEM   3,POWER2        ;AND POWER2.
        SETZM   COSFLG          ;ZERO TWO OF
        SETZM   SINFLG          ;THE FLAGS.
        FDVR    1,0             ;JUMP TO THAUFL IF
        JFCL    THAUFL          ;OV/UN/DIV TROUBLE.
N2:     DMOVE   1,BASE1
        PUSHJ   P,.CLOG       ;LOG(R)
        DMOVE   0,1             ;MOVE RESULT TO R0,R1
        MOVE    2,POWER1        ;RESTORE R2
        MOVE    3,POWER2        ;RESTORE R3
        MOVEM   0,LOGR          ;AND STORE
        CAML    1,[202622077325] ;THEM
        FSBR    1,[203622077325];IN LOGR
        MOVEM   1,THETA         ;AND THETA.
N1:     PUSHJ   17,ANGLCL       ;CALC THE LOG(TRIG).
        SKIPE   OUTFLG          ;IF THE ANS. HAS BEEN SETUP, GO TO OWT,
        JRST    OWT             ;O'E, STAY HERE.

MAGCLC: MOVN    0,POWER2        ;CALC -B*THETA,
        FMPR    0,THETA         ;UNDERFLOW IS OK,
        JFCL    [JUMPE 0,.+1    ;GO TO OVER1 IF
        JRST    OVER1]          ;OVERFLOW OCCURRED.
        MOVE    1,POWER1        ;CALC A*LOGR,
MAG1:   FMPR    1,LOGR          ;JUMP TO TEMP1
        JFCL    TEMP1           ;IF UNDER/OVERFLOW.
MAG2:   FADRB   0,1             ;CALC.A*LOGR - B*THETA AND
        JFCL    TEMP2           ;GO TO TEMP2 WHEN OVER/UNDERFLOW.
MAG3:   FADRM   0,LOGCOS        ;CALC ARG FOR EXP -- REAL
        JFCL                    ;AND NEVER MIND OVER/UNDERFLOW.
        FADRM   1,LOGSIN        ;CALC ARG FOR EXP -- IMAG
        JFCL                    ;AND NEVER MIND OVER/UNDERFLOW.
TEST:   SKIPE   COSFLG          ;COSFLG AND SINFLG ARE 0, UNLESS
        JRST    SETSG3          ;COS AND SIN ARE 0, RESPECTIVELY.
        MOVE    1,LOGCOS
        PUSHJ   P,.SEXP       ;CALC REAL PART
        MOVEM   1,SAVE4         ;SAVE IT
        SKIPE   SINFLG          ;SEE NOTE FOR
        JRST    SETSGN          ;TEST ABOVE.
SETSG3: MOVE    1,LOGSIN
        PUSHJ   P,.SEXP       ;CALC IMAG PART
        MOVEM   1,IMAG          ;SAVE IN IMAG
SETSGN: SKIPGE  COSINE          ;SET THE SIGN
        MOVNS   SAVE4           ;OF REAL PART
        SKIPGE  SINE            ;SET THE SIGN
        MOVNS   IMAG            ;OF IMAG(ANS).
STORE:  MOVE    0,SAVE4         ;RETURN REAL PART
        MOVE    1,IMAG          ;RETURN IMAG(ANS).
        JRST    OWT             ;GO TO EXIT.

ANGLCL: SETZM   OUTFLG          ;ZERO THE OUT FLAG.
        FMPR    2,1             ;CALC A*THETA AND GO TO
        JFCL    ANGL1           ;ANGL1 IF OVER/UNDERFLOW OCCURS.
        FMPR    0,POWER2        ;CALC B*LOGR AND GO TO
        JFCL    ANGL2           ;ANGL2 IF OVER/UNDERFLOW OCCURS.
        FADR    2,0             ;CALC A*THETA + B*LOGR AND GO TO
        JFCL    ANGL3           ;ANGL3 IF OVER/UNDERFLOW OCCURS.
TRIG:   MOVEM   2,SAVE2         ;RESTORE R2
        MOVE    1,2
        PUSHJ   P,.SSIN       ;SIN(ARG)
        MOVEM   1,SINE          ;STORE IN SINE
        MOVE    1,SAVE2
        PUSHJ   P,.SCOS       ;COS(ARG)
        MOVE    0,1
        MOVEM   0,COSINE        ;IN COSINE.
        JUMPN   0,LGCOSC        ;IF COS=0, THEN REAL=0.
COSZ:   AOS     COSFLG          ;SO SET COSFLG NE 0
        SETZM   SAVE4           ;SET UP REAL AND GO
        JRST    CHKSIN          ;AHEAD TO CHKSIN.
LGCOSC: MOVM    2,COSINE        ;COS NE 0, SO
        MOVE    1,2
        PUSHJ   P,.SLOG       ;LOG(/COS/)
        MOVE    0,1
        MOVEM   0,LOGCOS        ;IN LOGCOS.
CHKSIN: SKIPE   SINE            ;IF SIN = 0
        JRST    LGSINC          ;THEN IMAG = 0,

SINZ:   AOS     SINFLG          ;SO SET SINFLG NE 0
        SETZM   IMAG            ;AND SET UP IMAG.
        SKIPE   COSFLG          ;IF THE ENTIRE ANSWER IS 0,
        JRST    BTHZRO          ;GO TO BTHZRO. O'E,
        POPJ    17,             ;RETURN.
LGSINC: MOVM    2,SINE          ;SIN NE 0, SO
        MOVE    1,2
        PUSHJ   P,.SLOG       ;LOG(/SIN/)
        MOVE    0,1
        MOVEM   0,LOGSIN        ;THEN JUMP OUT OF THIS SECTION.
        POPJ    17,             ;******END OF CODE FOR MAIN CALC******

OVER1:  MOVE    1,POWER1        ;CALC A*LOGR
        FMPR    1,LOGR          ;AND IF ANYTHING
        JFCL    [JUMPE 1,.+1    ;BUT B*THETA AND A*LOGR
        XOR     1,0             ;BOTH OVERFLOW AND THEY HAVE
        JUMPGE  1,.+1           ;DIFFERENT SIGNS, GO AHEAD.
        JRST    OVER2]          ;FOR THAT SPECIAL CASE, GO TO OVER2.
TEMP4:  MOVEM   0,LOGCOS        ;ARG IS ALREADY SO LARGE THAT
        MOVEM   0,LOGSIN        ;LOG(TRIG) DOESN'T MATTER, SO STORE
        JRST    TEST            ;RESULTS AND GO BACK TO CALC.
OVER2:  MOVN    0,POWER2        ;SPECIAL CASE, OVERFLOW
        MOVE    3,LOGR          ;PLUS OVERFLOW, WITH
        MOVE    2,THETA         ;DIFFERENT SIGNS.
        PUSHJ   17,FOUR         ;CALC IT
        JUMPN   0,TEMP4         ;AND THEN
        JRST    TEST            ;RETURN.

FOUR:   FDVR    0,POWER1        ;THIS SECTION CALCULATES
        MOVE    1,3             ;X1*X2 - X3*X4
        FDVR    1,2             ;IN
        MOVEM   0,TEMP          ;DIFFERENT
        FADR    0,1             ;WAYS
        JFCL    OVER3           ;DEPENDING
        FMPR    0,POWER1        ;ON
        JFCL                    ;WHERE
        FMPR    0,2             ;OVERFLOW
        JFCL                    ;AND
        POPJ    17,             ;UNDERFLOW
OVER3:  MOVE    0,2             ;OCCUR.  IT IS
        FMPR    0,TEMP          ;CALLED
        JFCL                    ;WITH
        FADR    0,3             ;PUSHJ AND
        FMPR    0,POWER1        ;EXITS
        JFCL                    ;WITH
        POPJ    17,             ;POPJ.

TEMP1:  JUMPE   1,MAG2          ;IGNORE UNDERFLOW,
        JRST    TEMP3           ;FOR OVERFLOW PLUS
TEMP2:  JUMPE   1,MAG3          ;NORMAL, THIS ANSWER
TEMP3:  MOVEM   1,LOGCOS        ;IS OVERFLOW, SO
        MOVEM   1,LOGSIN        ;SET IT UP, AND
        JRST    TEST            ;RETURN.


ANGL1:  FMPR    0,POWER2        ;IF O/U + O/U,
        JFCL    ANGL11          ;GO TO ANGL11. O'E, STAY HERE.
        JUMPN   2,BTHZRO        ;IF O+N, ANS IS O, GO TO BTHZRO.
        MOVE    2,0             ;IF U+N WHERE N>EPS,
        MOVE    0,POWER1        ;THEN
BTHM10: MOVM    3,2             ;ANS = N, GO TO TRIG.
        CAML    3,EPS           ;IF U+N WHERE N< EPS,
        JRST    TRIG            ;THEN
        FMPRI   1,271400        ;STAY HERE AND TRY TO
        FMPR    1,0             ;SAVE
        JFCL                    ;SOME BITS
        FMPRI   2,271400        ;THEN
        FADR    2,1             ;GO TO
        JRST    SUMUFL          ;SUMUFL.
BTHZRO: SETZB   0,1             ;ANSWER = (0,0), SO
        AOS     OUTFLG          ;SET THE OUT FLAG
        POPJ    17,             ;AND EXIT.

ANGL11: JUMPN   2,.+3           ;IF U+U, GO TO UU.
        JUMPE   0,UU            ;IF U+O, GO TO
        JRST    BTHZRO          ;BTHZRO.
        JUMPE   0,BTHZRO        ;IF O+O WITH THE
        XOR     2,0             ;SAME SIGN, GO TO BTHZRO.
        JUMPGE  2,BTHZRO        ;IF O+O WITH DIFFERENT SIGNS,
        MOVE    0,POWER2        ;STAY HERE.
        MOVE    3,THETA         ;FOUR CALCULATES
        MOVE    2,LOGR          ;THE SUM OF THE TWO
        PUSHJ   17,FOUR         ;PRODUCTS -- THEN
        MOVE    2,0             ;GO BACK TO
        JRST    TRIG            ;TRIG.

UU:     MOVE    0,LOGR          ;THIS
        MOVE    1,THETA         ;IS
        MOVE    4,LG2126        ;THE UNDERFLOW
        MOVEM   4,SAVE4         ;SAVE R4
        FMPRI   0,377400        ;PLUS
        FMPRI   1,377400        ;UNDERFLOW
        MOVEM   0,TEMP          ;CASE --
        MOVEM   1,IMAG          ;MULTIPLY
        FMPR    0,POWER2        ;IT
        JFCL    U1              ;UP
        FMPR    1,POWER1        ;AND
        JFCL    U2              ;TRY
        MOVEM   0,2             ;TO
UU20:   FADR    0,1             ;SAVE
        JFCL    DOUBL           ;IT.
UU21:   MOVMM   0,2             ;4
UU2:    MOVEM   0,SINE          ;CONTAINS
        MOVE    1,2
        PUSHJ   P,.SLOG       ;A
        MOVE    0,1
        SETZM   LOGCOS          ;FACTOR
        FSBR    0,SAVE4         ;TO
        MOVEM   0,LOGSIN        ;BE
        POPJ    17,             ;SUBTRACTED.

U1:     FMPR    1,POWER1        ;CONTINUATION
        JFCL    DOUBL           ;OF UNDERFLOW PLUS
        MOVE    0,1             ;UNDERFLOW CASE --

U2:     MOVM    2,0             ;MULTIPLYING
        CAML    2,EPS           ;UP AS
        JRST    UU2             ;MUCH

DOUBL:  MOVE    0,POWER2        ;AS
        MOVE    1,POWER1        ;IS
        FMPRI   0,377400        ;NECESSARY.
        FMPRI   1,377400        ;DOUBL
        FMPR    0,TEMP          ;IS
        FMPR    1,IMAG          ;ALSO USED
        FADR    4,LG2126        ;BY
        JRST    UU20            ;SEVERAL SECTIONS.

ANGL2:  JUMPN   0,BTHZRO        ;O+N=O, ANS = (0,0).
        MOVE    1,LOGR          ;SET UP FOR
        MOVE    0,POWER2        ;U+N TESTS
        JRST    BTHM10          ;AND JUMP TO THEM.

ANGL3:  JUMPN   2,BTHZRO        ;IF THE SUM OVERFLOWS, ANS=(0,0).
        MOVE    2,POWER1        ;THIS
        FMPR    2,THETA         ;IS
        FMPRI   2,271400        ;UNDERFLOW --
        FMPRI   0,271400        ;TRY TO
        FADR    2,0             ;SAVE IT.

SUMUFL: MOVEM   2,SINE          ;THE FINAL ARG
        MOVM    2,SINE          ;HAD TO BE
        MOVE    1,2
        PUSHJ   P,.SLOG       ;SAVED
        MOVE    0,1
        FSBR    0,LG256         ;SUBTRACT
        MOVEM   0,LOGSIN        ;56.0*LOG(2)BASE2
        SETZM   LOGCOS          ;AT THE
        POPJ    17,             ;END.


THAUFL: JUMPE   0,DIVCHK        ;GO TO DIVCHK IF X = 0.
        JUMPN   1,N2            ;RETURN IMMED. IF REALLY OVFLW.
        MOVM    3,BASE1         ;GET
        MOVE    1,3             ;LOGR =
        PUSHJ   P,.SLOG       ;LOG (/X/)
        MOVE    0,1
        MOVEM   0,LOGR          ;AND STORE IT.
        MOVM    1,POWER1        ;/A/ < 1.0 ?
        CAML    1,[1.0]         ;NO, GO
        JRST    AGTHN1          ;TO AGTHN1.
        SETZB   1,THETA         ;YES, THETA = 0
        JRST    N1              ;AND GO BACK TO MAIN. CALC.

AGTHN1: MOVE    1,BASE2         ;SWAP ARGS., SO
        MOVEM   1,THETA         ;THAT A = A/X
        MOVEM   2,TEEMP1        ;AND
        FDVR    2,BASE1         ;THETA = Y
        MOVE    2,POWER1        ;AND CALL THE
        PUSHJ   17,ANGLCL       ;ANGLE CALCULATION.
        SKIPE   OUTFLG          ;IF (0,0), THEN
        JRST    OWT             ;EXIT.
        SETZM   THETA           ;SET THETA = 0, AND
        MOVE    1,TEEMP1        ;RESTORE A = A
        MOVEM   1,POWER1        ;AND GO BACK TO
        JRST    MAGCLC          ;MAIN CALC.

DIVCHK: MOVM    3,BASE2         ;X = 0, SO
        MOVE    1,3             ;LOGR = LOG(/Y/)
        PUSHJ   P,.SLOG
        MOVE    0,1
        MOVEM   0,LOGR          ;AND THETA =
        MOVE    1,[201622077325] ;+-
        SKIPGE  BASE2           ;PI/2.
        MOVNS   1               ;SET UP
        MOVEM   1,THETA         ;LOCATIONS AND RETURN
        JRST    N1              ;TO MAIN CALC.



EPS:    033400000000	
PWRTYP: XWD     2,2
LG2126: 207535261175
LG256:  206466417250

        LIT

        RELOC   0

SAVE2:  BLOCK   1		
SAVE3:  BLOCK   1		
SAVE4:  BLOCK   1
BASE1:  BLOCK   1		
BASE2:  BLOCK   1		
POWER1: BLOCK   1		
POWER2: BLOCK   1		
COSFLG: BLOCK   1		
SINFLG: BLOCK   1		
LOGR:   BLOCK   1		
THETA:  BLOCK   1		
COSINE: BLOCK   1		
SINE:   BLOCK   1		
IMAG:   BLOCK   1		
LOGCOS: BLOCK   1		
LOGSIN: BLOCK   1		
TEMP:   BLOCK   1		
OUTFLG: BLOCK   1		
TEEMP1: BLOCK   1		


        END
   